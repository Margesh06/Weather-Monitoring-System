{"ast":null,"code":"// src/components/Alerts.jsx\nimport React,{useEffect,useState}from'react';import{fetchAlerts}from'../services/apiService';import'../styles/alert.css';// Import the CSS file for styling\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Alerts=()=>{const[alerts,setAlerts]=useState([]);const[loading,setLoading]=useState(true);// State for loading indicator\nconst[currentAlertIndex,setCurrentAlertIndex]=useState(0);// Current index of the alert being displayed\nconst getAlerts=async()=>{setLoading(true);// Set loading to true before fetching\ntry{const data=await fetchAlerts();// Fetch alerts from the API\nsetAlerts(data);// Update state with fetched alerts\n}catch(error){console.error('Failed to fetch alerts:',error);// Log error if fetching fails\n}setLoading(false);// Set loading to false after fetching\n};useEffect(()=>{// Fetch alerts immediately on mount\ngetAlerts();const intervalId=setInterval(getAlerts,300000);// Clear the interval on component unmount\nreturn()=>clearInterval(intervalId);},[]);useEffect(()=>{// Set an interval to change alerts every 15 seconds\nconst alertInterval=setInterval(()=>{setCurrentAlertIndex(prevIndex=>(prevIndex+1)%alerts.length);// Loop through alerts\n},2000);// Change alert every 15 seconds\nreturn()=>clearInterval(alertInterval);// Clear interval on unmount\n},[alerts]);return/*#__PURE__*/_jsx(\"div\",{className:\"alerts-container\",children:loading?/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading...\"})// Display loading message while fetching\n:alerts.length>0?/*#__PURE__*/_jsxs(\"div\",{className:\"alert-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"alert-header\",children:[/*#__PURE__*/_jsx(\"strong\",{className:\"alert-type\",children:alerts[currentAlertIndex].alert_type}),/*#__PURE__*/_jsx(\"span\",{className:\"alert-timestamp\",children:new Date(alerts[currentAlertIndex].timestamp).toLocaleString()})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"alert-body\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"alert-message\",children:alerts[currentAlertIndex].message}),/*#__PURE__*/_jsxs(\"p\",{className:\"alert-city\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"City:\"}),\" \",alerts[currentAlertIndex].city]})]})]},alerts[currentAlertIndex]._id):/*#__PURE__*/_jsx(\"p\",{className:\"no-alerts\",children:\"No alerts at this time.\"})});};export default Alerts;","map":{"version":3,"names":["React","useEffect","useState","fetchAlerts","jsx","_jsx","jsxs","_jsxs","Alerts","alerts","setAlerts","loading","setLoading","currentAlertIndex","setCurrentAlertIndex","getAlerts","data","error","console","intervalId","setInterval","clearInterval","alertInterval","prevIndex","length","className","children","alert_type","Date","timestamp","toLocaleString","message","city","_id"],"sources":["C:/Users/MARGESH/OneDrive/Desktop/zeotap/Real Time Weather/weather-monitoring-system/frontend/src/components/Alerts.js"],"sourcesContent":["// src/components/Alerts.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { fetchAlerts } from '../services/apiService';\r\nimport '../styles/alert.css'; // Import the CSS file for styling\r\n\r\nconst Alerts = () => {\r\n    const [alerts, setAlerts] = useState([]);\r\n    const [loading, setLoading] = useState(true); // State for loading indicator\r\n    const [currentAlertIndex, setCurrentAlertIndex] = useState(0); // Current index of the alert being displayed\r\n\r\n    const getAlerts = async () => {\r\n        setLoading(true); // Set loading to true before fetching\r\n        try {\r\n            const data = await fetchAlerts(); // Fetch alerts from the API\r\n            setAlerts(data); // Update state with fetched alerts\r\n        } catch (error) {\r\n            console.error('Failed to fetch alerts:', error); // Log error if fetching fails\r\n        }\r\n        setLoading(false); // Set loading to false after fetching\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Fetch alerts immediately on mount\r\n        getAlerts();\r\n\r\n        const intervalId = setInterval(getAlerts, 300000);\r\n\r\n        // Clear the interval on component unmount\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Set an interval to change alerts every 15 seconds\r\n        const alertInterval = setInterval(() => {\r\n            setCurrentAlertIndex((prevIndex) => (prevIndex + 1) % alerts.length); // Loop through alerts\r\n        }, 2000); // Change alert every 15 seconds\r\n\r\n        return () => clearInterval(alertInterval); // Clear interval on unmount\r\n    }, [alerts]);\r\n\r\n    return (\r\n        <div className=\"alerts-container\">\r\n            {loading ? (\r\n                <div className=\"loading\">Loading...</div> // Display loading message while fetching\r\n            ) : alerts.length > 0 ? (\r\n                <div className=\"alert-card\" key={alerts[currentAlertIndex]._id}>\r\n                    <div className=\"alert-header\">\r\n                        <strong className=\"alert-type\">{alerts[currentAlertIndex].alert_type}</strong>\r\n                        <span className=\"alert-timestamp\">{new Date(alerts[currentAlertIndex].timestamp).toLocaleString()}</span>\r\n                    </div>\r\n                    <div className=\"alert-body\">\r\n                        <p className=\"alert-message\">{alerts[currentAlertIndex].message}</p>\r\n                        <p className=\"alert-city\"><strong>City:</strong> {alerts[currentAlertIndex].city}</p>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <p className=\"no-alerts\">No alerts at this time.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Alerts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}